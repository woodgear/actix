initSidebarItems({"enum":[["ActorState","Actor execution state"]],"mod":[["actors","Helper actors"],["dev","The `actix` prelude for library developers"],["fut","Custom `Future` implementation with `Actix` support"],["msgs","Actix system messages"],["prelude","The `actix` prelude"],["sync","Sync actors support"]],"struct":[["Address","Address of the actor"],["Arbiter","Event loop controller"],["Context","Actor execution context"],["FramedContext","Actor execution context for Framed object"],["Registry","Actors registry"],["Request","`Request` is a `Future` which represents asyncronous message sending process."],["Response","`Response` represents asyncronous message handling process."],["SpawnHandle","Spawned future handle. Could be used for cancelling spawned future."],["Supervisor","Actor supervisor"],["SyncAddress","`Send` address of the actor. Actor can run in differend thread"],["System","System is an actor which manages process."],["SystemRegistry","System wide actors registry"],["SystemRunner","Helper object that runs System's event loop"]],"trait":[["Actor","Actors are objects which encapsulate state and behavior."],["ActorAddress","Trait give access to actor's address"],["ActorContext","Actor execution context"],["ArbiterService","Trait defines arbiter's service."],["AsyncContext","Asynchronous execution context"],["ContextFutureSpawner","Helper trait which can spawn future into actor's context"],["FramedActor","Actor trait that allows to handle `tokio_io::codec::Framed` objects."],["Handler","Message handler"],["ResponseType","Message response type"],["Subscriber",""],["Supervised","Actors with ability to restart after failure"],["SystemService","Trait defines system's service."],["ToEnvelope","Converter trait, packs message to suitable envelope"]],"type":[["MessageResult",""],["ResponseFuture",""]]});